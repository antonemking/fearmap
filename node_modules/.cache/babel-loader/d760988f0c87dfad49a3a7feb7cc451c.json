{"ast":null,"code":"import layerEvents from \"../../lib/layerEvents\";\nimport mixin from \"./layerMixin\";\nexport default {\n  name: \"VectorLayer\",\n  mixins: [mixin],\n  computed: {\n    getSourceFeatures() {\n      return filter => {\n        if (this.map) {\n          return this.map.querySourceFeatures(this.sourceId, {\n            sourceLayer: this.layer[\"source-layer\"],\n            filter\n          });\n        }\n\n        return null;\n      };\n    },\n\n    getRenderedFeatures() {\n      return (geometry, filter) => {\n        if (this.map) {\n          return this.map.queryRenderedFeatures(geometry, {\n            layers: [this.layerId],\n            filter\n          });\n        }\n\n        return null;\n      };\n    }\n\n  },\n  watch: {\n    filter(filter) {\n      if (this.initial) return;\n      this.map.setFilter(this.layerId, filter);\n    }\n\n  },\n\n  created() {\n    this.$_deferredMount();\n  },\n\n  methods: {\n    $_deferredMount() {\n      let source = {\n        type: \"vector\",\n        ...this.source\n      };\n      this.map.on(\"dataloading\", this.$_watchSourceLoading);\n\n      try {\n        this.map.addSource(this.sourceId, source);\n      } catch (err) {\n        if (this.replaceSource) {\n          this.map.removeSource(this.sourceId);\n          this.map.addSource(this.sourceId, source);\n        }\n      }\n\n      this.$_addLayer();\n      this.$_bindLayerEvents(layerEvents);\n      this.map.off(\"dataloading\", this.$_watchSourceLoading);\n      this.initial = false;\n    },\n\n    $_addLayer() {\n      let existed = this.map.getLayer(this.layerId);\n\n      if (existed) {\n        if (this.replace) {\n          this.map.removeLayer(this.layerId);\n        } else {\n          this.$_emitEvent(\"layer-exists\", {\n            layerId: this.layerId\n          });\n          return existed;\n        }\n      }\n\n      let layer = {\n        id: this.layerId,\n        source: this.sourceId,\n        ...this.layer\n      };\n      this.map.addLayer(layer, this.before);\n      this.$_emitEvent(\"added\", {\n        layerId: this.layerId\n      });\n    },\n\n    setFeatureState(featureId, state) {\n      if (this.map) {\n        const params = {\n          id: featureId,\n          source: this.sourceId,\n          \"source-layer\": this.layer[\"source-layer\"]\n        };\n        return this.map.setFeatureState(params, state);\n      }\n    },\n\n    getFeatureState(featureId) {\n      if (this.map) {\n        const params = {\n          id: featureId,\n          source: this.source,\n          \"source-layer\": this.layer[\"source-layer\"]\n        };\n        return this.map.getFeatureState(params);\n      }\n    }\n\n  }\n};","map":{"version":3,"sources":["/Users/muhammad/Ayaz/express-vue3-tailwind-map/client/node_modules/vue-mapbox/src/components/layer/VectorLayer.js"],"names":["layerEvents","mixin","name","mixins","computed","getSourceFeatures","filter","map","querySourceFeatures","sourceId","sourceLayer","layer","getRenderedFeatures","geometry","queryRenderedFeatures","layers","layerId","watch","initial","setFilter","created","$_deferredMount","methods","source","type","on","$_watchSourceLoading","addSource","err","replaceSource","removeSource","$_addLayer","$_bindLayerEvents","off","existed","getLayer","replace","removeLayer","$_emitEvent","id","addLayer","before","setFeatureState","featureId","state","params","getFeatureState"],"mappings":"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","sourcesContent":["import layerEvents from \"../../lib/layerEvents\";\nimport mixin from \"./layerMixin\";\n\nexport default {\n  name: \"VectorLayer\",\n  mixins: [mixin],\n\n  computed: {\n    getSourceFeatures() {\n      return filter => {\n        if (this.map) {\n          return this.map.querySourceFeatures(this.sourceId, {\n            sourceLayer: this.layer[\"source-layer\"],\n            filter\n          });\n        }\n        return null;\n      };\n    },\n\n    getRenderedFeatures() {\n      return (geometry, filter) => {\n        if (this.map) {\n          return this.map.queryRenderedFeatures(geometry, {\n            layers: [this.layerId],\n            filter\n          });\n        }\n        return null;\n      };\n    }\n  },\n\n  watch: {\n    filter(filter) {\n      if (this.initial) return;\n      this.map.setFilter(this.layerId, filter);\n    }\n  },\n\n  created() {\n    this.$_deferredMount();\n  },\n\n  methods: {\n    $_deferredMount() {\n      let source = {\n        type: \"vector\",\n        ...this.source\n      };\n\n      this.map.on(\"dataloading\", this.$_watchSourceLoading);\n      try {\n        this.map.addSource(this.sourceId, source);\n      } catch (err) {\n        if (this.replaceSource) {\n          this.map.removeSource(this.sourceId);\n          this.map.addSource(this.sourceId, source);\n        }\n      }\n      this.$_addLayer();\n      this.$_bindLayerEvents(layerEvents);\n      this.map.off(\"dataloading\", this.$_watchSourceLoading);\n      this.initial = false;\n    },\n\n    $_addLayer() {\n      let existed = this.map.getLayer(this.layerId);\n      if (existed) {\n        if (this.replace) {\n          this.map.removeLayer(this.layerId);\n        } else {\n          this.$_emitEvent(\"layer-exists\", { layerId: this.layerId });\n          return existed;\n        }\n      }\n      let layer = {\n        id: this.layerId,\n        source: this.sourceId,\n        ...this.layer\n      };\n\n      this.map.addLayer(layer, this.before);\n      this.$_emitEvent(\"added\", { layerId: this.layerId });\n    },\n\n    setFeatureState(featureId, state) {\n      if (this.map) {\n        const params = {\n          id: featureId,\n          source: this.sourceId,\n          \"source-layer\": this.layer[\"source-layer\"]\n        };\n        return this.map.setFeatureState(params, state);\n      }\n    },\n\n    getFeatureState(featureId) {\n      if (this.map) {\n        const params = {\n          id: featureId,\n          source: this.source,\n          \"source-layer\": this.layer[\"source-layer\"]\n        };\n        return this.map.getFeatureState(params);\n      }\n    }\n  }\n};\n"]},"metadata":{},"sourceType":"module"}