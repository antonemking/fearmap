{"ast":null,"code":"import mixin from \"./layerMixin\";\nimport layerEvents from \"../../lib/layerEvents\";\nexport default {\n  name: \"ImageLayer\",\n  mixins: [mixin],\n\n  created() {\n    if (this.source) {\n      if (this.source.coordinates) {\n        this.$watch(\"source.coordinates\", function (next) {\n          if (this.initial) return;\n\n          if (next) {\n            this.mapSource.setCoordinates(next);\n          }\n        }, {\n          deep: true\n        });\n      }\n\n      if (this.source.url) {\n        this.$watch(\"source.url\", function (next) {\n          if (this.initial) return;\n\n          if (next) {\n            this.mapSource.updateImage({\n              url: next,\n              coordinates: this.source.coordinates\n            });\n          }\n        }, {\n          deep: true\n        });\n      }\n    }\n\n    this.$_deferredMount();\n  },\n\n  methods: {\n    $_deferredMount() {\n      const source = {\n        type: \"image\",\n        ...this.source\n      };\n      this.map.on(\"dataloading\", this.$_watchSourceLoading);\n\n      try {\n        this.map.addSource(this.sourceId, source);\n      } catch (err) {\n        if (this.replaceSource) {\n          this.map.removeSource(this.sourceId);\n          this.map.addSource(this.sourceId, source);\n        }\n      }\n\n      this.$_addLayer();\n      this.$_bindLayerEvents(layerEvents);\n      this.initial = false;\n    },\n\n    $_addLayer() {\n      let existed = this.map.getLayer(this.layerId);\n\n      if (existed) {\n        if (this.replace) {\n          this.map.removeLayer(this.layerId);\n        } else {\n          this.$_emitEvent(\"layer-exists\", {\n            layerId: this.layerId\n          });\n          return existed;\n        }\n      }\n\n      const layer = {\n        id: this.layerId,\n        source: this.sourceId,\n        type: \"raster\",\n        ...this.layer\n      };\n      this.map.addLayer(layer, this.before);\n      this.$_emitEvent(\"added\", {\n        layerId: this.layerId\n      });\n    }\n\n  }\n};","map":{"version":3,"sources":["/Users/muhammad/Ayaz/express-vue3-tailwind-map/client/node_modules/vue-mapbox/src/components/layer/ImageLayer.js"],"names":["mixin","layerEvents","name","mixins","created","source","coordinates","$watch","next","initial","mapSource","setCoordinates","deep","url","updateImage","$_deferredMount","methods","type","map","on","$_watchSourceLoading","addSource","sourceId","err","replaceSource","removeSource","$_addLayer","$_bindLayerEvents","existed","getLayer","layerId","replace","removeLayer","$_emitEvent","layer","id","addLayer","before"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,cAAlB;AACA,OAAOC,WAAP,MAAwB,uBAAxB;AAEA,eAAe;AACbC,EAAAA,IAAI,EAAE,YADO;AAEbC,EAAAA,MAAM,EAAE,CAACH,KAAD,CAFK;;AAIbI,EAAAA,OAAO,GAAG;AACR,QAAI,KAAKC,MAAT,EAAiB;AACf,UAAI,KAAKA,MAAL,CAAYC,WAAhB,EAA6B;AAC3B,aAAKC,MAAL,CACE,oBADF,EAEE,UAASC,IAAT,EAAe;AACb,cAAI,KAAKC,OAAT,EAAkB;;AAClB,cAAID,IAAJ,EAAU;AACR,iBAAKE,SAAL,CAAeC,cAAf,CAA8BH,IAA9B;AACD;AACF,SAPH,EAQE;AAAEI,UAAAA,IAAI,EAAE;AAAR,SARF;AAUD;;AAED,UAAI,KAAKP,MAAL,CAAYQ,GAAhB,EAAqB;AACnB,aAAKN,MAAL,CACE,YADF,EAEE,UAASC,IAAT,EAAe;AACb,cAAI,KAAKC,OAAT,EAAkB;;AAClB,cAAID,IAAJ,EAAU;AACR,iBAAKE,SAAL,CAAeI,WAAf,CAA2B;AACzBD,cAAAA,GAAG,EAAEL,IADoB;AAEzBF,cAAAA,WAAW,EAAE,KAAKD,MAAL,CAAYC;AAFA,aAA3B;AAID;AACF,SAVH,EAWE;AAAEM,UAAAA,IAAI,EAAE;AAAR,SAXF;AAaD;AACF;;AACD,SAAKG,eAAL;AACD,GApCY;;AAsCbC,EAAAA,OAAO,EAAE;AACPD,IAAAA,eAAe,GAAG;AAChB,YAAMV,MAAM,GAAG;AACbY,QAAAA,IAAI,EAAE,OADO;AAEb,WAAG,KAAKZ;AAFK,OAAf;AAKA,WAAKa,GAAL,CAASC,EAAT,CAAY,aAAZ,EAA2B,KAAKC,oBAAhC;;AACA,UAAI;AACF,aAAKF,GAAL,CAASG,SAAT,CAAmB,KAAKC,QAAxB,EAAkCjB,MAAlC;AACD,OAFD,CAEE,OAAOkB,GAAP,EAAY;AACZ,YAAI,KAAKC,aAAT,EAAwB;AACtB,eAAKN,GAAL,CAASO,YAAT,CAAsB,KAAKH,QAA3B;AACA,eAAKJ,GAAL,CAASG,SAAT,CAAmB,KAAKC,QAAxB,EAAkCjB,MAAlC;AACD;AACF;;AACD,WAAKqB,UAAL;AACA,WAAKC,iBAAL,CAAuB1B,WAAvB;AACA,WAAKQ,OAAL,GAAe,KAAf;AACD,KAnBM;;AAqBPiB,IAAAA,UAAU,GAAG;AACX,UAAIE,OAAO,GAAG,KAAKV,GAAL,CAASW,QAAT,CAAkB,KAAKC,OAAvB,CAAd;;AACA,UAAIF,OAAJ,EAAa;AACX,YAAI,KAAKG,OAAT,EAAkB;AAChB,eAAKb,GAAL,CAASc,WAAT,CAAqB,KAAKF,OAA1B;AACD,SAFD,MAEO;AACL,eAAKG,WAAL,CAAiB,cAAjB,EAAiC;AAAEH,YAAAA,OAAO,EAAE,KAAKA;AAAhB,WAAjC;AACA,iBAAOF,OAAP;AACD;AACF;;AACD,YAAMM,KAAK,GAAG;AACZC,QAAAA,EAAE,EAAE,KAAKL,OADG;AAEZzB,QAAAA,MAAM,EAAE,KAAKiB,QAFD;AAGZL,QAAAA,IAAI,EAAE,QAHM;AAIZ,WAAG,KAAKiB;AAJI,OAAd;AAOA,WAAKhB,GAAL,CAASkB,QAAT,CAAkBF,KAAlB,EAAyB,KAAKG,MAA9B;AACA,WAAKJ,WAAL,CAAiB,OAAjB,EAA0B;AAAEH,QAAAA,OAAO,EAAE,KAAKA;AAAhB,OAA1B;AACD;;AAxCM;AAtCI,CAAf","sourcesContent":["import mixin from \"./layerMixin\";\nimport layerEvents from \"../../lib/layerEvents\";\n\nexport default {\n  name: \"ImageLayer\",\n  mixins: [mixin],\n\n  created() {\n    if (this.source) {\n      if (this.source.coordinates) {\n        this.$watch(\n          \"source.coordinates\",\n          function(next) {\n            if (this.initial) return;\n            if (next) {\n              this.mapSource.setCoordinates(next);\n            }\n          },\n          { deep: true }\n        );\n      }\n\n      if (this.source.url) {\n        this.$watch(\n          \"source.url\",\n          function(next) {\n            if (this.initial) return;\n            if (next) {\n              this.mapSource.updateImage({\n                url: next,\n                coordinates: this.source.coordinates\n              });\n            }\n          },\n          { deep: true }\n        );\n      }\n    }\n    this.$_deferredMount();\n  },\n\n  methods: {\n    $_deferredMount() {\n      const source = {\n        type: \"image\",\n        ...this.source\n      };\n\n      this.map.on(\"dataloading\", this.$_watchSourceLoading);\n      try {\n        this.map.addSource(this.sourceId, source);\n      } catch (err) {\n        if (this.replaceSource) {\n          this.map.removeSource(this.sourceId);\n          this.map.addSource(this.sourceId, source);\n        }\n      }\n      this.$_addLayer();\n      this.$_bindLayerEvents(layerEvents);\n      this.initial = false;\n    },\n\n    $_addLayer() {\n      let existed = this.map.getLayer(this.layerId);\n      if (existed) {\n        if (this.replace) {\n          this.map.removeLayer(this.layerId);\n        } else {\n          this.$_emitEvent(\"layer-exists\", { layerId: this.layerId });\n          return existed;\n        }\n      }\n      const layer = {\n        id: this.layerId,\n        source: this.sourceId,\n        type: \"raster\",\n        ...this.layer\n      };\n\n      this.map.addLayer(layer, this.before);\n      this.$_emitEvent(\"added\", { layerId: this.layerId });\n    }\n  }\n};\n"]},"metadata":{},"sourceType":"module"}