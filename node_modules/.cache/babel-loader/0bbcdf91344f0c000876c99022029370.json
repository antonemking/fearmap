{"ast":null,"code":"// import withRegistration from \"../../lib/withRegistration\";\nimport withEvents from \"../../lib/withEvents\";\nconst mapboxSourceProps = {\n  sourceId: {\n    type: String,\n    required: true\n  },\n  source: {\n    type: [Object, String],\n    default: undefined\n  }\n};\nconst mapboxLayerStyleProps = {\n  layerId: {\n    type: String,\n    required: true\n  },\n  layer: {\n    type: Object,\n    required: true\n  },\n  before: {\n    type: String,\n    default: undefined\n  }\n};\nconst componentProps = {\n  clearSource: {\n    type: Boolean,\n    default: true\n  },\n  replaceSource: {\n    type: Boolean,\n    default: false\n  },\n  replace: {\n    type: Boolean,\n    default: false\n  }\n};\nexport default {\n  mixins: [withEvents],\n  props: { ...mapboxSourceProps,\n    ...mapboxLayerStyleProps,\n    ...componentProps\n  },\n  inject: [\"mapbox\", \"map\"],\n\n  data() {\n    return {\n      initial: true\n    };\n  },\n\n  computed: {\n    sourceLoaded() {\n      return this.map ? this.map.isSourceLoaded(this.sourceId) : false;\n    },\n\n    mapLayer() {\n      return this.map ? this.map.getLayer(this.layerId) : null;\n    },\n\n    mapSource() {\n      return this.map ? this.map.getSource(this.sourceId) : null;\n    }\n\n  },\n\n  created() {\n    if (this.layer.minzoom) {\n      this.$watch(\"layer.minzoom\", function (next) {\n        if (this.initial) return;\n        this.map.setLayerZoomRange(this.layerId, next, this.layer.maxzoom);\n      });\n    }\n\n    if (this.layer.maxzoom) {\n      this.$watch(\"layer.maxzoom\", function (next) {\n        if (this.initial) return;\n        this.map.setLayerZoomRange(this.layerId, this.layer.minzoom, next);\n      });\n    }\n\n    if (this.layer.paint) {\n      this.$watch(\"layer.paint\", function (next) {\n        if (this.initial) return;\n\n        if (next) {\n          for (let prop of Object.keys(next)) {\n            this.map.setPaintProperty(this.layerId, prop, next[prop]);\n          }\n        }\n      }, {\n        deep: true\n      });\n    }\n\n    if (this.layer.layout) {\n      this.$watch(\"layer.layout\", function (next) {\n        if (this.initial) return;\n\n        if (next) {\n          for (let prop of Object.keys(next)) {\n            this.map.setLayoutProperty(this.layerId, prop, next[prop]);\n          }\n        }\n      }, {\n        deep: true\n      });\n    }\n\n    if (this.layer.filter) {\n      this.$watch(\"layer.filter\", function (next) {\n        if (this.initial) return;\n        this.map.setFilter(this.layerId, next);\n      }, {\n        deep: true\n      });\n    }\n  },\n\n  beforeDestroy() {\n    if (this.map && this.map.loaded()) {\n      try {\n        this.map.removeLayer(this.layerId);\n      } catch (err) {\n        this.$_emitEvent(\"layer-does-not-exist\", {\n          layerId: this.sourceId,\n          error: err\n        });\n      }\n\n      if (this.clearSource) {\n        try {\n          this.map.removeSource(this.sourceId);\n        } catch (err) {\n          this.$_emitEvent(\"source-does-not-exist\", {\n            sourceId: this.sourceId,\n            error: err\n          });\n        }\n      }\n    }\n  },\n\n  methods: {\n    $_emitLayerMapEvent(event) {\n      return this.$_emitMapEvent(event, {\n        layerId: this.layerId\n      });\n    },\n\n    $_bindLayerEvents(events) {\n      Object.keys(this.$listeners).forEach(eventName => {\n        if (events.includes(eventName)) {\n          this.map.on(eventName, this.layerId, this.$_emitLayerMapEvent);\n        }\n      });\n    },\n\n    $_unbindEvents(events) {\n      if (this.map) {\n        events.forEach(eventName => {\n          this.map.off(eventName, this.layerId, this.$_emitLayerMapEvent);\n        });\n      }\n    },\n\n    $_watchSourceLoading(data) {\n      if (data.dataType === \"source\" && data.sourceId === this.sourceId) {\n        this.$_emitEvent(\"layer-source-loading\", {\n          sourceId: this.sourceId\n        });\n        this.map.off(\"dataloading\", this.$_watchSourceLoading);\n      }\n    },\n\n    move(beforeId) {\n      this.map.moveLayer(this.layerId, beforeId);\n      this.$_emitEvent(\"layer-moved\", {\n        layerId: this.layerId,\n        beforeId: beforeId\n      });\n    },\n\n    remove() {\n      this.map.removeLayer(this.layerId);\n      this.map.removeSource(this.sourceId);\n      this.$_emitEvent(\"layer-removed\", {\n        layerId: this.layerId\n      });\n      this.$destroy();\n    }\n\n  },\n\n  render() {}\n\n};","map":{"version":3,"sources":["/Users/muhammad/Ayaz/express-vue3-tailwind-map/client/node_modules/vue-mapbox/src/components/layer/layerMixin.js"],"names":["withEvents","mapboxSourceProps","sourceId","type","String","required","source","Object","default","undefined","mapboxLayerStyleProps","layerId","layer","before","componentProps","clearSource","Boolean","replaceSource","replace","mixins","props","inject","data","initial","computed","sourceLoaded","map","isSourceLoaded","mapLayer","getLayer","mapSource","getSource","created","minzoom","$watch","next","setLayerZoomRange","maxzoom","paint","prop","keys","setPaintProperty","deep","layout","setLayoutProperty","filter","setFilter","beforeDestroy","loaded","removeLayer","err","$_emitEvent","error","removeSource","methods","$_emitLayerMapEvent","event","$_emitMapEvent","$_bindLayerEvents","events","$listeners","forEach","eventName","includes","on","$_unbindEvents","off","$_watchSourceLoading","dataType","move","beforeId","moveLayer","remove","$destroy","render"],"mappings":"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","sourcesContent":["// import withRegistration from \"../../lib/withRegistration\";\nimport withEvents from \"../../lib/withEvents\";\n\nconst mapboxSourceProps = {\n  sourceId: {\n    type: String,\n    required: true\n  },\n  source: {\n    type: [Object, String],\n    default: undefined\n  }\n};\n\nconst mapboxLayerStyleProps = {\n  layerId: {\n    type: String,\n    required: true\n  },\n  layer: {\n    type: Object,\n    required: true\n  },\n  before: {\n    type: String,\n    default: undefined\n  }\n};\n\nconst componentProps = {\n  clearSource: {\n    type: Boolean,\n    default: true\n  },\n  replaceSource: {\n    type: Boolean,\n    default: false\n  },\n  replace: {\n    type: Boolean,\n    default: false\n  }\n};\n\nexport default {\n  mixins: [withEvents],\n  props: {\n    ...mapboxSourceProps,\n    ...mapboxLayerStyleProps,\n    ...componentProps\n  },\n\n  inject: [\"mapbox\", \"map\"],\n\n  data() {\n    return {\n      initial: true\n    };\n  },\n\n  computed: {\n    sourceLoaded() {\n      return this.map ? this.map.isSourceLoaded(this.sourceId) : false;\n    },\n    mapLayer() {\n      return this.map ? this.map.getLayer(this.layerId) : null;\n    },\n    mapSource() {\n      return this.map ? this.map.getSource(this.sourceId) : null;\n    }\n  },\n\n  created() {\n    if (this.layer.minzoom) {\n      this.$watch(\"layer.minzoom\", function(next) {\n        if (this.initial) return;\n        this.map.setLayerZoomRange(this.layerId, next, this.layer.maxzoom);\n      });\n    }\n\n    if (this.layer.maxzoom) {\n      this.$watch(\"layer.maxzoom\", function(next) {\n        if (this.initial) return;\n        this.map.setLayerZoomRange(this.layerId, this.layer.minzoom, next);\n      });\n    }\n\n    if (this.layer.paint) {\n      this.$watch(\n        \"layer.paint\",\n        function(next) {\n          if (this.initial) return;\n          if (next) {\n            for (let prop of Object.keys(next)) {\n              this.map.setPaintProperty(this.layerId, prop, next[prop]);\n            }\n          }\n        },\n        { deep: true }\n      );\n    }\n\n    if (this.layer.layout) {\n      this.$watch(\n        \"layer.layout\",\n        function(next) {\n          if (this.initial) return;\n          if (next) {\n            for (let prop of Object.keys(next)) {\n              this.map.setLayoutProperty(this.layerId, prop, next[prop]);\n            }\n          }\n        },\n        { deep: true }\n      );\n    }\n\n    if (this.layer.filter) {\n      this.$watch(\n        \"layer.filter\",\n        function(next) {\n          if (this.initial) return;\n          this.map.setFilter(this.layerId, next);\n        },\n        { deep: true }\n      );\n    }\n  },\n\n  beforeDestroy() {\n    if (this.map && this.map.loaded()) {\n      try {\n        this.map.removeLayer(this.layerId);\n      } catch (err) {\n        this.$_emitEvent(\"layer-does-not-exist\", {\n          layerId: this.sourceId,\n          error: err\n        });\n      }\n      if (this.clearSource) {\n        try {\n          this.map.removeSource(this.sourceId);\n        } catch (err) {\n          this.$_emitEvent(\"source-does-not-exist\", {\n            sourceId: this.sourceId,\n            error: err\n          });\n        }\n      }\n    }\n  },\n\n  methods: {\n    $_emitLayerMapEvent(event) {\n      return this.$_emitMapEvent(event, { layerId: this.layerId });\n    },\n\n    $_bindLayerEvents(events) {\n      Object.keys(this.$listeners).forEach(eventName => {\n        if (events.includes(eventName)) {\n          this.map.on(eventName, this.layerId, this.$_emitLayerMapEvent);\n        }\n      });\n    },\n\n    $_unbindEvents(events) {\n      if (this.map) {\n        events.forEach(eventName => {\n          this.map.off(eventName, this.layerId, this.$_emitLayerMapEvent);\n        });\n      }\n    },\n\n    $_watchSourceLoading(data) {\n      if (data.dataType === \"source\" && data.sourceId === this.sourceId) {\n        this.$_emitEvent(\"layer-source-loading\", { sourceId: this.sourceId });\n        this.map.off(\"dataloading\", this.$_watchSourceLoading);\n      }\n    },\n\n    move(beforeId) {\n      this.map.moveLayer(this.layerId, beforeId);\n      this.$_emitEvent(\"layer-moved\", {\n        layerId: this.layerId,\n        beforeId: beforeId\n      });\n    },\n\n    remove() {\n      this.map.removeLayer(this.layerId);\n      this.map.removeSource(this.sourceId);\n      this.$_emitEvent(\"layer-removed\", { layerId: this.layerId });\n      this.$destroy();\n    }\n  },\n\n  render() {}\n};\n"]},"metadata":{},"sourceType":"module"}