{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"flex h-screen relative\"\n};\nconst _hoisted_2 = {\n  class: \"w-[30%]\"\n};\nconst _hoisted_3 = [\"onClick\"];\nconst _hoisted_4 = {\n  class: \"text-[14px]\"\n};\n\nconst _hoisted_5 = /*#__PURE__*/_createElementVNode(\"div\", {\n  id: \"mapid\",\n  class: \"w-[70%] h-full z-[1]\"\n}, null, -1\n/* HOISTED */\n);\n\nconst _hoisted_6 = /*#__PURE__*/_createElementVNode(\"pre\", {\n  id: \"coordinates\",\n  class: \"ui-coordinates\"\n}, null, -1\n/* HOISTED */\n);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.locations, (location, ind) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: ind,\n      onClick: $event => $options.setCoords(location.coordinates),\n      class: \"border-[1px] p-2\"\n    }, [_createElementVNode(\"h2\", _hoisted_4, _toDisplayString(location.name), 1\n    /* TEXT */\n    ), _createElementVNode(\"span\", null, _toDisplayString(location.date), 1\n    /* TEXT */\n    )], 8\n    /* PROPS */\n    , _hoisted_3);\n  }), 128\n  /* KEYED_FRAGMENT */\n  ))]), _hoisted_5, _hoisted_6]);\n}","map":{"version":3,"sources":["/Users/muhammad/Ayaz/express-vue3-tailwind-map/client/src/views/HomeView.vue"],"names":[],"mappings":";;AACO,EAAA,KAAK,EAAC;;;AACJ,EAAA,KAAK,EAAC;;;;AAOH,EAAA,KAAK,EAAC;;;gCAId,mBAAA,CAAmD,KAAnD,EAAmD;AAA9C,EAAA,EAAE,EAAC,OAA2C;AAAnC,EAAA,KAAK,EAAC;AAA6B,CAAnD,E,IAAA,E;;AAAA,C;;gCACA,mBAAA,CAAmD,KAAnD,EAAmD;AAA9C,EAAA,EAAE,EAAC,aAA2C;AAA7B,EAAA,KAAK,EAAC;AAAuB,CAAnD,E,IAAA,E;;AAAA,C;;;uBAbF,mBAAA,CAcM,KAdN,EAAA,UAAA,EAcM,CAbJ,mBAAA,CAUM,KAVN,EAAA,UAAA,EAUM,E,kBATJ,mBAAA,CAQM,SARN,EAQM,IARN,EAQM,WAAA,CAPsB,MAAA,CAAA,SAOtB,EAP+B,CAA3B,QAA2B,EAAjB,GAAiB,KAAd;yBADvB,mBAAA,CAQM,KARN,EAQM;AANH,MAAA,GAAG,EAAE,GAMF;AALH,MAAA,OAAK,EAAA,MAAA,IAAE,QAAA,CAAA,SAAA,CAAU,QAAQ,CAAC,WAAnB,CAKJ;AAJJ,MAAA,KAAK,EAAC;AAIF,KARN,E,CAME,mBAAA,CAAgD,IAAhD,EAAA,UAAA,EAAgD,gBAAA,CAArB,QAAQ,CAAC,IAAY,CAAhD,EAAwC;AAAA;AAAxC,K,EACA,mBAAA,CAAgC,MAAhC,EAAgC,IAAhC,EAAgC,gBAAA,CAAvB,QAAQ,CAAC,IAAc,CAAhC,EAAsB;AAAA;AAAtB,K,CAPF,E;;AAAA,M,UAAA,C;GAQM,CARN,E;;AAAA,GASI,EAVN,CAaI,EAFJ,UAEI,EADJ,UACI,CAdN,C","sourcesContent":["<template>\n  <div class=\"flex h-screen relative\">\n    <div class=\"w-[30%]\">\n      <div\n        v-for=\"(location, ind) in locations\"\n        :key=\"ind\"\n        @click=\"setCoords(location.coordinates)\"\n        class=\"border-[1px] p-2\"\n      >\n        <h2 class=\"text-[14px]\">{{ location.name }}</h2>\n        <span>{{ location.date }}</span>\n      </div>\n    </div>\n    <div id=\"mapid\" class=\"w-[70%] h-full z-[1]\"></div>\n    <pre id='coordinates' class='ui-coordinates'></pre>\n  </div>\n</template>\n\n<script>\nimport leaflet from \"leaflet\";\nimport { onMounted, ref } from \"vue\";\nexport default {\n  name: \"HomeView\",\n  methods: {\n  setCoords(pos) {\n      console.log('===========pos', pos);\n\n      // stop fetching\n      // fetchCoords.value = null;\n\n      // set coords in session storage\n      const setSessionCoords = {\n        lat: pos.latitude,\n        lng: pos.longitude,\n      };\n      sessionStorage.setItem(\"coords\", JSON.stringify(setSessionCoords));\n\n      // set ref coords value\n      coords.value = setSessionCoords;\n\n      plotGeoLocation(coords.value);\n    },\n    plotResult(coords) {\n      // If there is already a marker, remove it. Only allow 1\n      if (resultMarker.value) {\n        map.removeLayer(resultMarker.value);\n      }\n      const customMarker = leaflet.icon({\n        iconUrl: require(\"../assets/map-marker-blue.svg\"),\n        iconSize: [35, 35], // size of the icon\n      });\n      resultMarker.value = leaflet\n        .marker([coords.coordinates[1], coords.coordinates[0]], {\n          icon: customMarker,\n        })\n        .addTo(map);\n      map.setView([coords.coordinates[1], coords.coordinates[0]], 13);\n    },\n  },\n  setup() {\n    let map;\n    onMounted(() => {\n      // init map\n      map = leaflet\n        .map(\"mapid\", {\n          zoomControl: false,\n        })\n        .setView([28.538336, -81.379234], 10);\n\n      // add tile layers\n      leaflet\n        .tileLayer(\n          `https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token=${process.env.VUE_APP_API_KEY}`,\n          {\n            maxZoom: 18,\n            id: \"mapbox/streets-v11\",\n            tileSize: 512,\n            zoomOffset: -1,\n            accessToken: process.env.VUE_APP_API_KEY,\n          }\n        )\n        .addTo(map);\n\n      map.on(\"moveend\", () => {\n        closeSearchResults();\n      });\n\n      // get users location\n      getGeolocation();\n    });\n\n    const coords = ref(null);\n    const fetchCoords = ref(null);\n    const geoMarker = ref(null);\n    const geoError = ref(null);\n    const geoErrorMsg = ref(null);\n\n    const getGeolocation = () => {\n      // if function is called, only run if we dont have coords\n      if (!coords.value) {\n        // check to see if we have coods in session sotrage\n        if (sessionStorage.getItem(\"coords\")) {\n          coords.value = JSON.parse(sessionStorage.getItem(\"coords\"));\n          plotGeoLocation(coords.value);\n          return;\n        }\n\n        // else get coords from geolocation API\n        fetchCoords.value = true;\n        navigator.geolocation.getCurrentPosition(setCoords, getLocError);\n        return;\n      }\n\n      // otherwise, remove location\n      coords.value = null;\n      sessionStorage.removeItem(\"coords\");\n      map.removeLayer(geoMarker.value);\n    };\n\n    const setCoords = (pos) => {\n      console.log('===========pos', pos);\n\n      // stop fetching\n      fetchCoords.value = null;\n\n      // set coords in session storage\n      const setSessionCoords = {\n        lat: pos.latitude,\n        lng: pos.longitude,\n      };\n      sessionStorage.setItem(\"coords\", JSON.stringify(setSessionCoords));\n\n      // set ref coords value\n      coords.value = setSessionCoords;\n\n      plotGeoLocation(coords.value);\n    };\n\n    const getLocError = (error) => {\n      // stop fetching coords\n      fetchCoords.value = null;\n      geoError.value = true;\n      geoErrorMsg.value = error.message;\n    };\n\n    const plotGeoLocation = (coords) => {\n      // create custom marker\n      const customMarker = leaflet.icon({\n        iconUrl: require(\"../assets/map-marker-red.svg\"),\n        iconSize: [35, 35],\n      });\n\n      // create new marker with coords and custom marker\n      geoMarker.value = leaflet\n        .marker([coords.lat, coords.lng], { icon: customMarker })\n        .addTo(map);\n\n      // set map view to current location\n      map.setView([coords.lat, coords.lng], 10);\n    };\n\n    const resultMarker = ref(null);\n    const plotResult = (coords) => {\n      // If there is already a marker, remove it. Only allow 1\n      if (resultMarker.value) {\n        map.removeLayer(resultMarker.value);\n      }\n      const customMarker = leaflet.icon({\n        iconUrl: require(\"../assets/map-marker-blue.svg\"),\n        iconSize: [35, 35], // size of the icon\n      });\n      resultMarker.value = leaflet\n        .marker([coords.coordinates[1], coords.coordinates[0]], {\n          icon: customMarker,\n        })\n        .addTo(map);\n      map.setView([coords.coordinates[1], coords.coordinates[0]], 13);\n    };\n\n    const removeResult = () => {\n      map.removeLayer(resultMarker.value);\n    };\n\n    const closeGeoError = () => {\n      geoErrorMsg.value = null;\n      geoError.value = null;\n    };\n\n    const searchResults = ref(null);\n    const toggleSearchResults = () => {\n      searchResults.value = !searchResults.value;\n    };\n    const closeSearchResults = () => {\n      searchResults.value = null;\n    };\n\n    return {\n      geoError,\n      closeGeoError,\n      geoErrorMsg,\n      fetchCoords,\n      coords,\n      getGeolocation,\n      plotResult,\n      searchResults,\n      toggleSearchResults,\n      closeSearchResults,\n      removeResult,\n      locations: [\n        {\n          name: \"Brushy Mountain State Penitentiary\",\n          date: \"2019-10-26\",\n          coordinates: {\n              latitude: 36.1052,\n              longitude: -84.4529,\n          },\n        },\n\n        {\n          name: \"Old South Pittsburg Hospital\",\n          date: \"2019-11-02\",\n          coordinates: {\n              latitude: 35.0021,\n              longitude: -85.7147,\n          },\n        },\n      ],\n    };\n  },\n};\n</script>\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}