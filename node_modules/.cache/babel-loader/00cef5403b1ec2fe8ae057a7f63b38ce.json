{"ast":null,"code":"import layerEvents from \"../../lib/layerEvents\";\nimport mixin from \"./layerMixin\";\nexport default {\n  name: \"VideoLayer\",\n  mixins: [mixin],\n  computed: {\n    video() {\n      return this.map.getSource(this.sourceId).getVideo();\n    }\n\n  },\n\n  created() {\n    if (this.source && this.source.coordinates) {\n      this.$watch(\"source.coordinates\", function (next) {\n        if (this.initial) return;\n        this.mapSource.setCoordinates(next);\n      });\n    }\n\n    this.$_deferredMount();\n  },\n\n  methods: {\n    $_deferredMount() {\n      const source = {\n        type: \"video\",\n        ...this.source\n      };\n      this.map.on(\"dataloading\", this.$_watchSourceLoading);\n\n      try {\n        this.map.addSource(this.sourceId, source);\n      } catch (err) {\n        if (this.replaceSource) {\n          this.map.removeSource(this.sourceId);\n          this.map.addSource(this.sourceId, source);\n        }\n      }\n\n      this.$_addLayer();\n      this.$_bindLayerEvents(layerEvents);\n      this.initial = false;\n    },\n\n    $_addLayer() {\n      let existed = this.map.getLayer(this.layerId);\n\n      if (existed) {\n        if (this.replace) {\n          this.map.removeLayer(this.layerId);\n        } else {\n          this.$_emitEvent(\"layer-exists\", {\n            layerId: this.layerId\n          });\n          return existed;\n        }\n      }\n\n      let layer = {\n        id: this.layerId,\n        source: this.sourceId,\n        type: \"background\",\n        ...this.layer\n      };\n      this.map.addLayer(layer, this.before);\n      this.$_emitEvent(\"added\", {\n        layerId: this.layerId\n      });\n    }\n\n  }\n};","map":{"version":3,"sources":["/Users/muhammad/Ayaz/express-vue3-tailwind-map/client/node_modules/vue-mapbox/src/components/layer/VideoLayer.js"],"names":["layerEvents","mixin","name","mixins","computed","video","map","getSource","sourceId","getVideo","created","source","coordinates","$watch","next","initial","mapSource","setCoordinates","$_deferredMount","methods","type","on","$_watchSourceLoading","addSource","err","replaceSource","removeSource","$_addLayer","$_bindLayerEvents","existed","getLayer","layerId","replace","removeLayer","$_emitEvent","layer","id","addLayer","before"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,uBAAxB;AACA,OAAOC,KAAP,MAAkB,cAAlB;AAEA,eAAe;AACbC,EAAAA,IAAI,EAAE,YADO;AAEbC,EAAAA,MAAM,EAAE,CAACF,KAAD,CAFK;AAIbG,EAAAA,QAAQ,EAAE;AACRC,IAAAA,KAAK,GAAG;AACN,aAAO,KAAKC,GAAL,CAASC,SAAT,CAAmB,KAAKC,QAAxB,EAAkCC,QAAlC,EAAP;AACD;;AAHO,GAJG;;AAUbC,EAAAA,OAAO,GAAG;AACR,QAAI,KAAKC,MAAL,IAAe,KAAKA,MAAL,CAAYC,WAA/B,EAA4C;AAC1C,WAAKC,MAAL,CAAY,oBAAZ,EAAkC,UAASC,IAAT,EAAe;AAC/C,YAAI,KAAKC,OAAT,EAAkB;AAClB,aAAKC,SAAL,CAAeC,cAAf,CAA8BH,IAA9B;AACD,OAHD;AAID;;AACD,SAAKI,eAAL;AACD,GAlBY;;AAoBbC,EAAAA,OAAO,EAAE;AACPD,IAAAA,eAAe,GAAG;AAChB,YAAMP,MAAM,GAAG;AACbS,QAAAA,IAAI,EAAE,OADO;AAEb,WAAG,KAAKT;AAFK,OAAf;AAKA,WAAKL,GAAL,CAASe,EAAT,CAAY,aAAZ,EAA2B,KAAKC,oBAAhC;;AACA,UAAI;AACF,aAAKhB,GAAL,CAASiB,SAAT,CAAmB,KAAKf,QAAxB,EAAkCG,MAAlC;AACD,OAFD,CAEE,OAAOa,GAAP,EAAY;AACZ,YAAI,KAAKC,aAAT,EAAwB;AACtB,eAAKnB,GAAL,CAASoB,YAAT,CAAsB,KAAKlB,QAA3B;AACA,eAAKF,GAAL,CAASiB,SAAT,CAAmB,KAAKf,QAAxB,EAAkCG,MAAlC;AACD;AACF;;AACD,WAAKgB,UAAL;AACA,WAAKC,iBAAL,CAAuB5B,WAAvB;AACA,WAAKe,OAAL,GAAe,KAAf;AACD,KAnBM;;AAqBPY,IAAAA,UAAU,GAAG;AACX,UAAIE,OAAO,GAAG,KAAKvB,GAAL,CAASwB,QAAT,CAAkB,KAAKC,OAAvB,CAAd;;AACA,UAAIF,OAAJ,EAAa;AACX,YAAI,KAAKG,OAAT,EAAkB;AAChB,eAAK1B,GAAL,CAAS2B,WAAT,CAAqB,KAAKF,OAA1B;AACD,SAFD,MAEO;AACL,eAAKG,WAAL,CAAiB,cAAjB,EAAiC;AAAEH,YAAAA,OAAO,EAAE,KAAKA;AAAhB,WAAjC;AACA,iBAAOF,OAAP;AACD;AACF;;AACD,UAAIM,KAAK,GAAG;AACVC,QAAAA,EAAE,EAAE,KAAKL,OADC;AAEVpB,QAAAA,MAAM,EAAE,KAAKH,QAFH;AAGVY,QAAAA,IAAI,EAAE,YAHI;AAIV,WAAG,KAAKe;AAJE,OAAZ;AAOA,WAAK7B,GAAL,CAAS+B,QAAT,CAAkBF,KAAlB,EAAyB,KAAKG,MAA9B;AACA,WAAKJ,WAAL,CAAiB,OAAjB,EAA0B;AAAEH,QAAAA,OAAO,EAAE,KAAKA;AAAhB,OAA1B;AACD;;AAxCM;AApBI,CAAf","sourcesContent":["import layerEvents from \"../../lib/layerEvents\";\nimport mixin from \"./layerMixin\";\n\nexport default {\n  name: \"VideoLayer\",\n  mixins: [mixin],\n\n  computed: {\n    video() {\n      return this.map.getSource(this.sourceId).getVideo();\n    }\n  },\n\n  created() {\n    if (this.source && this.source.coordinates) {\n      this.$watch(\"source.coordinates\", function(next) {\n        if (this.initial) return;\n        this.mapSource.setCoordinates(next);\n      });\n    }\n    this.$_deferredMount();\n  },\n\n  methods: {\n    $_deferredMount() {\n      const source = {\n        type: \"video\",\n        ...this.source\n      };\n\n      this.map.on(\"dataloading\", this.$_watchSourceLoading);\n      try {\n        this.map.addSource(this.sourceId, source);\n      } catch (err) {\n        if (this.replaceSource) {\n          this.map.removeSource(this.sourceId);\n          this.map.addSource(this.sourceId, source);\n        }\n      }\n      this.$_addLayer();\n      this.$_bindLayerEvents(layerEvents);\n      this.initial = false;\n    },\n\n    $_addLayer() {\n      let existed = this.map.getLayer(this.layerId);\n      if (existed) {\n        if (this.replace) {\n          this.map.removeLayer(this.layerId);\n        } else {\n          this.$_emitEvent(\"layer-exists\", { layerId: this.layerId });\n          return existed;\n        }\n      }\n      let layer = {\n        id: this.layerId,\n        source: this.sourceId,\n        type: \"background\",\n        ...this.layer\n      };\n\n      this.map.addLayer(layer, this.before);\n      this.$_emitEvent(\"added\", { layerId: this.layerId });\n    }\n  }\n};\n"]},"metadata":{},"sourceType":"module"}