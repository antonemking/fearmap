{"ast":null,"code":"import layerEvents from \"../../lib/layerEvents\";\nimport mixin from \"./layerMixin\";\nexport default {\n  name: \"CanvasLayer\",\n  mixins: [mixin],\n  inject: [\"mapbox\", \"map\"],\n  props: {\n    source: {\n      type: Object,\n      required: true\n    },\n    layer: {\n      type: Object,\n      default: null\n    }\n  },\n  computed: {\n    canvasElement() {\n      return this.mapSource ? this.mapSource.getCanvas() : null;\n    }\n\n  },\n  watch: {\n    coordinates(val) {\n      if (this.initial) return;\n      this.mapSource.setCoordinates(val);\n    }\n\n  },\n\n  created() {\n    this.$_deferredMount();\n  },\n\n  methods: {\n    $_deferredMount() {\n      const source = {\n        type: \"canvas\",\n        ...this.source\n      };\n      this.map.on(\"dataloading\", this.$_watchSourceLoading);\n\n      try {\n        this.map.addSource(this.sourceId, source);\n      } catch (err) {\n        if (this.replaceSource) {\n          this.map.removeSource(this.sourceId);\n          this.map.addSource(this.sourceId, source);\n        }\n      }\n\n      this.$_addLayer();\n      this.$_bindLayerEvents(layerEvents);\n      this.initial = false;\n    },\n\n    $_addLayer() {\n      let existed = this.map.getLayer(this.layerId);\n\n      if (existed) {\n        if (this.replace) {\n          this.map.removeLayer(this.layerId);\n        } else {\n          this.$_emitEvent(\"layer-exists\", {\n            layerId: this.layerId\n          });\n          return existed;\n        }\n      }\n\n      let layer = {\n        id: this.layerId,\n        source: this.sourceId,\n        type: \"raster\",\n        ...this.layer\n      };\n      this.map.addLayer(layer, this.before);\n      this.$_emitEvent(\"added\", {\n        layerId: this.layerId,\n        canvas: this.canvasElement\n      });\n    }\n\n  }\n};","map":{"version":3,"sources":["/Users/muhammad/Ayaz/express-vue3-tailwind-map/client/node_modules/vue-mapbox/src/components/layer/CanvasLayer.js"],"names":["layerEvents","mixin","name","mixins","inject","props","source","type","Object","required","layer","default","computed","canvasElement","mapSource","getCanvas","watch","coordinates","val","initial","setCoordinates","created","$_deferredMount","methods","map","on","$_watchSourceLoading","addSource","sourceId","err","replaceSource","removeSource","$_addLayer","$_bindLayerEvents","existed","getLayer","layerId","replace","removeLayer","$_emitEvent","id","addLayer","before","canvas"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,uBAAxB;AACA,OAAOC,KAAP,MAAkB,cAAlB;AAEA,eAAe;AACbC,EAAAA,IAAI,EAAE,aADO;AAEbC,EAAAA,MAAM,EAAE,CAACF,KAAD,CAFK;AAIbG,EAAAA,MAAM,EAAE,CAAC,QAAD,EAAW,KAAX,CAJK;AAMbC,EAAAA,KAAK,EAAE;AACLC,IAAAA,MAAM,EAAE;AACNC,MAAAA,IAAI,EAAEC,MADA;AAENC,MAAAA,QAAQ,EAAE;AAFJ,KADH;AAKLC,IAAAA,KAAK,EAAE;AACLH,MAAAA,IAAI,EAAEC,MADD;AAELG,MAAAA,OAAO,EAAE;AAFJ;AALF,GANM;AAiBbC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,aAAa,GAAG;AACd,aAAO,KAAKC,SAAL,GAAiB,KAAKA,SAAL,CAAeC,SAAf,EAAjB,GAA8C,IAArD;AACD;;AAHO,GAjBG;AAuBbC,EAAAA,KAAK,EAAE;AACLC,IAAAA,WAAW,CAACC,GAAD,EAAM;AACf,UAAI,KAAKC,OAAT,EAAkB;AAClB,WAAKL,SAAL,CAAeM,cAAf,CAA8BF,GAA9B;AACD;;AAJI,GAvBM;;AA8BbG,EAAAA,OAAO,GAAG;AACR,SAAKC,eAAL;AACD,GAhCY;;AAkCbC,EAAAA,OAAO,EAAE;AACPD,IAAAA,eAAe,GAAG;AAChB,YAAMhB,MAAM,GAAG;AACbC,QAAAA,IAAI,EAAE,QADO;AAEb,WAAG,KAAKD;AAFK,OAAf;AAKA,WAAKkB,GAAL,CAASC,EAAT,CAAY,aAAZ,EAA2B,KAAKC,oBAAhC;;AACA,UAAI;AACF,aAAKF,GAAL,CAASG,SAAT,CAAmB,KAAKC,QAAxB,EAAkCtB,MAAlC;AACD,OAFD,CAEE,OAAOuB,GAAP,EAAY;AACZ,YAAI,KAAKC,aAAT,EAAwB;AACtB,eAAKN,GAAL,CAASO,YAAT,CAAsB,KAAKH,QAA3B;AACA,eAAKJ,GAAL,CAASG,SAAT,CAAmB,KAAKC,QAAxB,EAAkCtB,MAAlC;AACD;AACF;;AACD,WAAK0B,UAAL;AACA,WAAKC,iBAAL,CAAuBjC,WAAvB;AACA,WAAKmB,OAAL,GAAe,KAAf;AACD,KAnBM;;AAqBPa,IAAAA,UAAU,GAAG;AACX,UAAIE,OAAO,GAAG,KAAKV,GAAL,CAASW,QAAT,CAAkB,KAAKC,OAAvB,CAAd;;AACA,UAAIF,OAAJ,EAAa;AACX,YAAI,KAAKG,OAAT,EAAkB;AAChB,eAAKb,GAAL,CAASc,WAAT,CAAqB,KAAKF,OAA1B;AACD,SAFD,MAEO;AACL,eAAKG,WAAL,CAAiB,cAAjB,EAAiC;AAAEH,YAAAA,OAAO,EAAE,KAAKA;AAAhB,WAAjC;AACA,iBAAOF,OAAP;AACD;AACF;;AACD,UAAIxB,KAAK,GAAG;AACV8B,QAAAA,EAAE,EAAE,KAAKJ,OADC;AAEV9B,QAAAA,MAAM,EAAE,KAAKsB,QAFH;AAGVrB,QAAAA,IAAI,EAAE,QAHI;AAIV,WAAG,KAAKG;AAJE,OAAZ;AAMA,WAAKc,GAAL,CAASiB,QAAT,CAAkB/B,KAAlB,EAAyB,KAAKgC,MAA9B;AACA,WAAKH,WAAL,CAAiB,OAAjB,EAA0B;AACxBH,QAAAA,OAAO,EAAE,KAAKA,OADU;AAExBO,QAAAA,MAAM,EAAE,KAAK9B;AAFW,OAA1B;AAID;;AA1CM;AAlCI,CAAf","sourcesContent":["import layerEvents from \"../../lib/layerEvents\";\nimport mixin from \"./layerMixin\";\n\nexport default {\n  name: \"CanvasLayer\",\n  mixins: [mixin],\n\n  inject: [\"mapbox\", \"map\"],\n\n  props: {\n    source: {\n      type: Object,\n      required: true\n    },\n    layer: {\n      type: Object,\n      default: null\n    }\n  },\n\n  computed: {\n    canvasElement() {\n      return this.mapSource ? this.mapSource.getCanvas() : null;\n    }\n  },\n\n  watch: {\n    coordinates(val) {\n      if (this.initial) return;\n      this.mapSource.setCoordinates(val);\n    }\n  },\n\n  created() {\n    this.$_deferredMount();\n  },\n\n  methods: {\n    $_deferredMount() {\n      const source = {\n        type: \"canvas\",\n        ...this.source\n      };\n\n      this.map.on(\"dataloading\", this.$_watchSourceLoading);\n      try {\n        this.map.addSource(this.sourceId, source);\n      } catch (err) {\n        if (this.replaceSource) {\n          this.map.removeSource(this.sourceId);\n          this.map.addSource(this.sourceId, source);\n        }\n      }\n      this.$_addLayer();\n      this.$_bindLayerEvents(layerEvents);\n      this.initial = false;\n    },\n\n    $_addLayer() {\n      let existed = this.map.getLayer(this.layerId);\n      if (existed) {\n        if (this.replace) {\n          this.map.removeLayer(this.layerId);\n        } else {\n          this.$_emitEvent(\"layer-exists\", { layerId: this.layerId });\n          return existed;\n        }\n      }\n      let layer = {\n        id: this.layerId,\n        source: this.sourceId,\n        type: \"raster\",\n        ...this.layer\n      };\n      this.map.addLayer(layer, this.before);\n      this.$_emitEvent(\"added\", {\n        layerId: this.layerId,\n        canvas: this.canvasElement\n      });\n    }\n  }\n};\n"]},"metadata":{},"sourceType":"module"}