{"ast":null,"code":"import promisify from \"map-promisified\";\nexport default {\n  created() {\n    this.actions = {};\n  },\n\n  methods: {\n    $_registerAsyncActions(map) {\n      this.actions = { ...promisify(map),\n\n        stop() {\n          this.map.stop();\n          const updatedProps = {\n            pitch: this.map.getPitch(),\n            zoom: this.map.getZoom(),\n            bearing: this.map.getBearing(),\n            center: this.map.getCenter()\n          };\n          Object.entries(updatedProps).forEach(prop => {\n            this.$_updateSyncedPropsFabric(prop[0], prop[1])();\n          });\n          return Promise.resolve(updatedProps);\n        }\n\n      };\n    }\n\n  }\n};","map":{"version":3,"sources":["/Users/muhammad/Ayaz/express-vue3-tailwind-map/client/node_modules/vue-mapbox/src/components/map/mixins/withAsyncActions.js"],"names":["promisify","created","actions","methods","$_registerAsyncActions","map","stop","updatedProps","pitch","getPitch","zoom","getZoom","bearing","getBearing","center","getCenter","Object","entries","forEach","prop","$_updateSyncedPropsFabric","Promise","resolve"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,iBAAtB;AAEA,eAAe;AACbC,EAAAA,OAAO,GAAG;AACR,SAAKC,OAAL,GAAe,EAAf;AACD,GAHY;;AAKbC,EAAAA,OAAO,EAAE;AACPC,IAAAA,sBAAsB,CAACC,GAAD,EAAM;AAC1B,WAAKH,OAAL,GAAe,EACb,GAAGF,SAAS,CAACK,GAAD,CADC;;AAEbC,QAAAA,IAAI,GAAG;AACL,eAAKD,GAAL,CAASC,IAAT;AACA,gBAAMC,YAAY,GAAG;AACnBC,YAAAA,KAAK,EAAE,KAAKH,GAAL,CAASI,QAAT,EADY;AAEnBC,YAAAA,IAAI,EAAE,KAAKL,GAAL,CAASM,OAAT,EAFa;AAGnBC,YAAAA,OAAO,EAAE,KAAKP,GAAL,CAASQ,UAAT,EAHU;AAInBC,YAAAA,MAAM,EAAE,KAAKT,GAAL,CAASU,SAAT;AAJW,WAArB;AAMAC,UAAAA,MAAM,CAACC,OAAP,CAAeV,YAAf,EAA6BW,OAA7B,CAAqCC,IAAI,IAAI;AAC3C,iBAAKC,yBAAL,CAA+BD,IAAI,CAAC,CAAD,CAAnC,EAAwCA,IAAI,CAAC,CAAD,CAA5C;AACD,WAFD;AAIA,iBAAOE,OAAO,CAACC,OAAR,CAAgBf,YAAhB,CAAP;AACD;;AAfY,OAAf;AAiBD;;AAnBM;AALI,CAAf","sourcesContent":["import promisify from \"map-promisified\";\n\nexport default {\n  created() {\n    this.actions = {};\n  },\n\n  methods: {\n    $_registerAsyncActions(map) {\n      this.actions = {\n        ...promisify(map),\n        stop() {\n          this.map.stop();\n          const updatedProps = {\n            pitch: this.map.getPitch(),\n            zoom: this.map.getZoom(),\n            bearing: this.map.getBearing(),\n            center: this.map.getCenter()\n          };\n          Object.entries(updatedProps).forEach(prop => {\n            this.$_updateSyncedPropsFabric(prop[0], prop[1])();\n          });\n\n          return Promise.resolve(updatedProps);\n        }\n      };\n    }\n  }\n};\n"]},"metadata":{},"sourceType":"module"}