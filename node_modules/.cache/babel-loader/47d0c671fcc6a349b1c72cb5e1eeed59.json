{"ast":null,"code":"export default {\n  methods: {\n    $_updateSyncedPropsFabric(prop, data) {\n      return () => {\n        this.propsIsUpdating[prop] = true;\n        let info = typeof data === \"function\" ? data() : data;\n        return this.$emit(`update:${prop}`, info);\n      };\n    },\n\n    $_bindPropsUpdateEvents() {\n      const syncedProps = [{\n        events: [\"moveend\"],\n        prop: \"center\",\n        getter: this.map.getCenter.bind(this.map)\n      }, {\n        events: [\"zoomend\"],\n        prop: \"zoom\",\n        getter: this.map.getZoom.bind(this.map)\n      }, {\n        events: [\"rotate\"],\n        prop: \"bearing\",\n        getter: this.map.getBearing.bind(this.map)\n      }, {\n        events: [\"pitch\"],\n        prop: \"pitch\",\n        getter: this.map.getPitch.bind(this.map)\n      } // TODO: make 'bounds' synced prop\n      // { events: ['moveend', 'zoomend', 'rotate', 'pitch'], prop: 'bounds', getter: this.map.getBounds.bind(this.map) }\n      ];\n      syncedProps.forEach(({\n        events,\n        prop,\n        getter\n      }) => {\n        events.forEach(event => {\n          if (this.$listeners[`update:${prop}`]) {\n            this.map.on(event, this.$_updateSyncedPropsFabric(prop, getter));\n          }\n        });\n      });\n    },\n\n    $_loadMap() {\n      return this.mapboxPromise.then(mapbox => {\n        this.mapbox = mapbox.default ? mapbox.default : mapbox;\n        return new Promise(resolve => {\n          if (this.accessToken) this.mapbox.accessToken = this.accessToken;\n          const map = new this.mapbox.Map({ ...this._props,\n            container: this.$refs.container,\n            style: this.mapStyle\n          });\n          map.on(\"load\", () => resolve(map));\n        });\n      });\n    },\n\n    $_RTLTextPluginError(error) {\n      this.$emit(\"rtl-plugin-error\", {\n        map: this.map,\n        error: error\n      });\n    },\n\n    $_bindMapEvents(events) {\n      Object.keys(this.$listeners).forEach(eventName => {\n        if (events.includes(eventName)) {\n          this.map.on(eventName, this.$_emitMapEvent);\n        }\n      });\n    },\n\n    $_unbindEvents(events) {\n      events.forEach(eventName => {\n        this.map.off(eventName, this.$_emitMapEvent);\n      });\n    }\n\n  }\n};","map":{"version":3,"sources":["/Users/muhammad/Ayaz/express-vue3-tailwind-map/client/node_modules/vue-mapbox/src/components/map/mixins/withPrivateMethods.js"],"names":["methods","$_updateSyncedPropsFabric","prop","data","propsIsUpdating","info","$emit","$_bindPropsUpdateEvents","syncedProps","events","getter","map","getCenter","bind","getZoom","getBearing","getPitch","forEach","event","$listeners","on","$_loadMap","mapboxPromise","then","mapbox","default","Promise","resolve","accessToken","Map","_props","container","$refs","style","mapStyle","$_RTLTextPluginError","error","$_bindMapEvents","Object","keys","eventName","includes","$_emitMapEvent","$_unbindEvents","off"],"mappings":"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","sourcesContent":["export default {\n  methods: {\n    $_updateSyncedPropsFabric(prop, data) {\n      return () => {\n        this.propsIsUpdating[prop] = true;\n        let info = typeof data === \"function\" ? data() : data;\n        return this.$emit(`update:${prop}`, info);\n      };\n    },\n\n    $_bindPropsUpdateEvents() {\n      const syncedProps = [\n        {\n          events: [\"moveend\"],\n          prop: \"center\",\n          getter: this.map.getCenter.bind(this.map)\n        },\n        {\n          events: [\"zoomend\"],\n          prop: \"zoom\",\n          getter: this.map.getZoom.bind(this.map)\n        },\n        {\n          events: [\"rotate\"],\n          prop: \"bearing\",\n          getter: this.map.getBearing.bind(this.map)\n        },\n        {\n          events: [\"pitch\"],\n          prop: \"pitch\",\n          getter: this.map.getPitch.bind(this.map)\n        }\n        // TODO: make 'bounds' synced prop\n        // { events: ['moveend', 'zoomend', 'rotate', 'pitch'], prop: 'bounds', getter: this.map.getBounds.bind(this.map) }\n      ];\n      syncedProps.forEach(({ events, prop, getter }) => {\n        events.forEach(event => {\n          if (this.$listeners[`update:${prop}`]) {\n            this.map.on(event, this.$_updateSyncedPropsFabric(prop, getter));\n          }\n        });\n      });\n    },\n\n    $_loadMap() {\n      return this.mapboxPromise.then(mapbox => {\n        this.mapbox = mapbox.default ? mapbox.default : mapbox;\n        return new Promise(resolve => {\n          if (this.accessToken) this.mapbox.accessToken = this.accessToken;\n          const map = new this.mapbox.Map({\n            ...this._props,\n            container: this.$refs.container,\n            style: this.mapStyle\n          });\n          map.on(\"load\", () => resolve(map));\n        });\n      });\n    },\n\n    $_RTLTextPluginError(error) {\n      this.$emit(\"rtl-plugin-error\", { map: this.map, error: error });\n    },\n\n    $_bindMapEvents(events) {\n      Object.keys(this.$listeners).forEach(eventName => {\n        if (events.includes(eventName)) {\n          this.map.on(eventName, this.$_emitMapEvent);\n        }\n      });\n    },\n\n    $_unbindEvents(events) {\n      events.forEach(eventName => {\n        this.map.off(eventName, this.$_emitMapEvent);\n      });\n    }\n  }\n};\n"]},"metadata":{},"sourceType":"module"}