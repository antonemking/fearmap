{"ast":null,"code":"import { setBlockTracking as _setBlockTracking, createElementVNode as _createElementVNode, renderSlot as _renderSlot, createCommentVNode as _createCommentVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"mgl-map-wrapper\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[0] || (_setBlockTracking(-1), _cache[0] = _createElementVNode(\"div\", {\n    id: _ctx.container,\n    ref: \"container\"\n  }, null, 8\n  /* PROPS */\n  , [\"id\"]), _setBlockTracking(1), _cache[0]), $data.initialized ? _renderSlot(_ctx.$slots, \"default\", {\n    key: 0\n  }) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"sources":["/Users/muhammad/Ayaz/express-vue3-tailwind-map/client/node_modules/vue-mapbox/src/components/map/GlMap.vue"],"names":[],"mappings":";;AACO,EAAA,KAAK,EAAC;;;uBAAX,mBAAA,CAGM,KAHN,EAAA,UAAA,EAGM,C,iDAFJ,mBAAA,CAA8C,KAA9C,EAA8C;AAAjC,IAAA,EAAE,EAAE,IAAA,CAAA,SAA6B;AAAlB,IAAA,GAAG,EAAC;AAAc,GAA9C,E,IAAA,E;;AAAA,I,MAAA,C,kCAEI,EADQ,KAAA,CAAA,W,GAAZ,WAAA,CAA2B,IAAA,CAAA,MAA3B,EAA2B,SAA3B,EAA2B;AAAA,IAAA,GAAA,EAAA;AAAA,GAA3B,C,oCACI,CAHN,C","sourcesContent":["<template>\n  <div class=\"mgl-map-wrapper\">\n    <div v-once :id=\"container\" ref=\"container\" />\n    <slot v-if=\"initialized\" />\n  </div>\n</template>\n\n<script>\nimport withEvents from \"../../lib/withEvents\";\nimport mapEvents from \"./events\";\nimport options from \"./options\";\nimport withWatchers from \"./mixins/withWatchers\";\nimport withPrivateMethods from \"./mixins/withPrivateMethods\";\nimport withAsyncActions from \"./mixins/withAsyncActions\";\n\nexport default {\n  name: \"GlMap\",\n\n  mixins: [withWatchers, withAsyncActions, withPrivateMethods, withEvents],\n\n  props: {\n    mapboxGl: {\n      type: Object,\n      default: null\n    },\n    ...options\n  },\n\n  provide() {\n    const self = this;\n    return {\n      get mapbox() {\n        return self.mapbox;\n      },\n      get map() {\n        return self.map;\n      },\n      get actions() {\n        return self.actions;\n      }\n    };\n  },\n\n  data() {\n    return {\n      initial: true,\n      initialized: false\n    };\n  },\n\n  computed: {\n    loaded() {\n      return this.map ? this.map.loaded() : false;\n    },\n    version() {\n      return this.map ? this.map.version : null;\n    },\n    // TODO: make 'bounds' synced prop\n    bounds() {\n      return this.map ? this.map.getBounds() : null;\n    },\n    isStyleLoaded() {\n      return this.map ? this.map.isStyleLoaded() : false;\n    },\n    areTilesLoaded() {\n      return this.map ? this.map.areTilesLoaded() : false;\n    },\n    isMoving() {\n      return this.map ? this.map.isMoving() : false;\n    },\n    canvas() {\n      return this.map ? this.map.getCanvas() : null;\n    },\n    canvasContainer() {\n      return this.map ? this.map.getCanvasContainer() : null;\n    },\n    images() {\n      return this.map ? this.map.listImages() : null;\n    }\n  },\n\n  created() {\n    this.map = null;\n    this.propsIsUpdating = {};\n    this.mapboxPromise = this.mapboxGl\n      ? Promise.resolve(this.mapboxGl)\n      : import(\"mapbox-gl\");\n  },\n\n  mounted() {\n    this.$_loadMap().then(map => {\n      this.map = map;\n      if (this.RTLTextPluginUrl !== undefined) {\n        this.mapbox.setRTLTextPlugin(\n          this.RTLTextPluginUrl,\n          this.$_RTLTextPluginError\n        );\n      }\n      const eventNames = Object.keys(mapEvents);\n      this.$_bindMapEvents(eventNames);\n      this.$_registerAsyncActions(map);\n      this.$_bindPropsUpdateEvents();\n      this.initial = false;\n      this.initialized = true;\n      this.$emit(\"load\", { map, component: this });\n    });\n  },\n\n  beforeDestroy() {\n    this.$nextTick(() => {\n      if (this.map) this.map.remove();\n    });\n  }\n};\n</script>\n\n<style>\n.mgl-map-wrapper {\n  height: 100%;\n  position: relative;\n  width: 100%;\n}\n\n.mgl-map-wrapper .mapboxgl-map {\n  height: 100%;\n  left: 0;\n  position: absolute;\n  top: 0;\n  width: 100%;\n}\n</style>\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}