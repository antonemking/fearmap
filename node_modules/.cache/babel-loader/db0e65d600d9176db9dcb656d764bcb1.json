{"ast":null,"code":"import { ref } from \"vue\";\nimport axios from \"axios\";\nimport LoadingSpinner from \"./LoadingSpinner.vue\";\nexport default {\n  props: [\"fetchCoords\", \"coords\", \"searchResults\"],\n  components: {\n    LoadingSpinner\n  },\n\n  setup(props, {\n    emit\n  }) {\n    const searchQuery = ref(null);\n    const searchData = ref(null);\n    const queryTimeout = ref(null);\n    const selectedResult = ref(null);\n\n    const search = () => {\n      clearTimeout(queryTimeout.value); // reset data on a new search\n\n      searchData.value = null;\n      queryTimeout.value = setTimeout(async () => {\n        // Only make search, if there is value in query input\n        if (searchQuery.value !== \"\") {\n          const params = new URLSearchParams({\n            fuzzyMatch: true,\n            language: \"en\",\n            limit: 10,\n            proximity: props.coords ? `${props.coords.lng},${props.coords.lat}` : \"0,0\"\n          });\n          const data = await axios.get(`api/search/${searchQuery.value}?${params}`);\n          searchData.value = data.data.features;\n        }\n      }, 750);\n    };\n\n    const selectResult = result => {\n      selectedResult.value = result;\n      emit(\"plotResult\", result.geometry);\n    };\n\n    const removeResult = () => {\n      selectedResult.value = null;\n      emit(\"removeResult\");\n    };\n\n    return {\n      searchQuery,\n      search,\n      searchData,\n      selectResult,\n      selectedResult,\n      removeResult\n    };\n  }\n\n};","map":{"version":3,"sources":["/Users/muhammad/Ayaz/express-vue3-tailwind-map/client/src/components/MapFeatures.vue"],"names":[],"mappings":"AAoEA,SAAS,GAAT,QAAoB,KAApB;AACA,OAAO,KAAP,MAAkB,OAAlB;AACA,OAAO,cAAP,MAA2B,sBAA3B;AACA,eAAe;AACb,EAAA,KAAK,EAAE,CAAC,aAAD,EAAgB,QAAhB,EAA0B,eAA1B,CADM;AAEb,EAAA,UAAU,EAAE;AAAE,IAAA;AAAF,GAFC;;AAGb,EAAA,KAAK,CAAC,KAAD,EAAQ;AAAE,IAAA;AAAF,GAAR,EAAkB;AACrB,UAAM,WAAU,GAAI,GAAG,CAAC,IAAD,CAAvB;AACA,UAAM,UAAS,GAAI,GAAG,CAAC,IAAD,CAAtB;AACA,UAAM,YAAW,GAAI,GAAG,CAAC,IAAD,CAAxB;AACA,UAAM,cAAa,GAAI,GAAG,CAAC,IAAD,CAA1B;;AAEA,UAAM,MAAK,GAAI,MAAM;AACnB,MAAA,YAAY,CAAC,YAAY,CAAC,KAAd,CAAZ,CADmB,CAGnB;;AACA,MAAA,UAAU,CAAC,KAAX,GAAmB,IAAnB;AACA,MAAA,YAAY,CAAC,KAAb,GAAqB,UAAU,CAAC,YAAY;AAC1C;AACA,YAAI,WAAW,CAAC,KAAZ,KAAsB,EAA1B,EAA8B;AAC5B,gBAAM,MAAK,GAAI,IAAI,eAAJ,CAAoB;AACjC,YAAA,UAAU,EAAE,IADqB;AAEjC,YAAA,QAAQ,EAAE,IAFuB;AAGjC,YAAA,KAAK,EAAE,EAH0B;AAIjC,YAAA,SAAS,EAAE,KAAK,CAAC,MAAN,GAAgB,GAAE,KAAK,CAAC,MAAN,CAAa,GAAI,IAAG,KAAK,CAAC,MAAN,CAAa,GAAI,EAAvD,GAA2D;AAJrC,WAApB,CAAf;AAMA,gBAAM,IAAG,GAAI,MAAM,KAAK,CAAC,GAAN,CAAW,cAAa,WAAW,CAAC,KAAM,IAAG,MAAO,EAApD,CAAnB;AACA,UAAA,UAAU,CAAC,KAAX,GAAmB,IAAI,CAAC,IAAL,CAAU,QAA7B;AACF;AACD,OAZ8B,EAY5B,GAZ4B,CAA/B;AAaD,KAlBD;;AAoBA,UAAM,YAAW,GAAK,MAAD,IAAY;AAC/B,MAAA,cAAc,CAAC,KAAf,GAAuB,MAAvB;AACA,MAAA,IAAI,CAAC,YAAD,EAAe,MAAM,CAAC,QAAtB,CAAJ;AACD,KAHD;;AAKA,UAAM,YAAW,GAAI,MAAM;AACzB,MAAA,cAAc,CAAC,KAAf,GAAuB,IAAvB;AACA,MAAA,IAAI,CAAC,cAAD,CAAJ;AACD,KAHD;;AAKA,WAAO;AACL,MAAA,WADK;AAEL,MAAA,MAFK;AAGL,MAAA,UAHK;AAIL,MAAA,YAJK;AAKL,MAAA,cALK;AAML,MAAA;AANK,KAAP;AAQD;;AA/CY,CAAf","sourcesContent":["<template>\n  <div\n    class=\"w-full md:w-auto absolute md:top-[40px] md:left-[60px] z-[2] flex gap-4 px-6 py-8 md:px-0 md:py-0 bg-transparent\"\n  >\n    <!-- Search -->\n    <div class=\"relative flex-1 md:min-w-[350px]\">\n      <!-- Search Input -->\n      <input\n        class=\"pl-9 pr-4 py-3 text-[14px] focus:outline-none w-full shadow-md rounded-md\"\n        type=\"text\"\n        placeholder=\"Start your search...\"\n        v-model=\"searchQuery\"\n        @input=\"search\"\n        @focus=\"$emit('toggleSearchResults')\"\n      />\n      <!-- Search Icon -->\n      <div class=\"absolute top-0 left-[8px] h-full flex items-center\">\n        <i class=\"fas fa-search\"></i>\n      </div>\n      <!-- Search Results -->\n      <div class=\"absolute mt-[8px] w-full\">\n        <!-- Search Queries -->\n        <div\n          v-if=\"searchQuery && searchResults\"\n          class=\"h-[200px] overflow-scroll bg-white rounded-md\"\n        >\n          <!-- Loading Spinner -->\n          <LoadingSpinner v-if=\"!searchData\" />\n          <!-- Display Results -->\n          <div v-else>\n            <div\n              class=\"px-4 py-2 flex gap-x-2 cursor-pointer hover:bg-slate-600 hover:text-white\"\n              v-for=\"(result, index) in searchData\"\n              :key=\"index\"\n              @click=\"selectResult(result)\"\n            >\n              <i class=\"fas fa-map-marker-alt\"></i>\n              <p class=\"text-[12px]\">{{ result.place_name_en }}</p>\n            </div>\n          </div>\n        </div>\n        <!-- Selected Search Result -->\n        <div v-if=\"selectedResult\" class=\"mt-[8px] px-4 py-3 bg-white rounded-md\">\n          <i @click=\"removeResult\" class=\"flex justify-end far fa-times-circle\"></i>\n          <h1 class=\"text-lg\">{{ selectedResult.text }}</h1>\n          <p class=\"text-xs mb-1\">\n            {{ selectedResult.properties.address }}, {{ selectedResult.city }},\n            {{ selectedResult.state }}\n          </p>\n          <p class=\"text-xs\">{{ selectedResult.properties.category }}</p>\n        </div>\n      </div>\n    </div>\n    <!-- Geolocation -->\n    <div\n      class=\"px-4 bg-white flex items-center shadow-md rounded-md min-h-[45px]\"\n      @click=\"$emit('getGeolocation')\"\n      :class=\"{ 'bg-slate-600': coords }\"\n    >\n      <i\n        class=\"fas fa-location-arrow 'text-slate-600' text-[18px]\"\n        :class=\"{ 'text-white': coords, 'animate-pulse': fetchCoords }\"\n      ></i>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { ref } from \"vue\";\nimport axios from \"axios\";\nimport LoadingSpinner from \"./LoadingSpinner.vue\";\nexport default {\n  props: [\"fetchCoords\", \"coords\", \"searchResults\"],\n  components: { LoadingSpinner },\n  setup(props, { emit }) {\n    const searchQuery = ref(null);\n    const searchData = ref(null);\n    const queryTimeout = ref(null);\n    const selectedResult = ref(null);\n\n    const search = () => {\n      clearTimeout(queryTimeout.value);\n\n      // reset data on a new search\n      searchData.value = null;\n      queryTimeout.value = setTimeout(async () => {\n        // Only make search, if there is value in query input\n        if (searchQuery.value !== \"\") {\n          const params = new URLSearchParams({\n            fuzzyMatch: true,\n            language: \"en\",\n            limit: 10,\n            proximity: props.coords ? `${props.coords.lng},${props.coords.lat}` : \"0,0\",\n          });\n          const data = await axios.get(`api/search/${searchQuery.value}?${params}`);\n          searchData.value = data.data.features;\n        }\n      }, 750);\n    };\n\n    const selectResult = (result) => {\n      selectedResult.value = result;\n      emit(\"plotResult\", result.geometry);\n    };\n\n    const removeResult = () => {\n      selectedResult.value = null;\n      emit(\"removeResult\");\n    };\n\n    return {\n      searchQuery,\n      search,\n      searchData,\n      selectResult,\n      selectedResult,\n      removeResult,\n    };\n  },\n};\n</script>\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}