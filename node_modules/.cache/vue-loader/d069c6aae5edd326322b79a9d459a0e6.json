{"remainingRequest":"/Users/muhammad/Ayaz/express-vue3-tailwind-map/client/node_modules/vue-loader/dist/index.js??ruleSet[0].use[1]!/Users/muhammad/Ayaz/express-vue3-tailwind-map/client/node_modules/vue-mapbox/src/components/map/GlMap.vue?vue&type=template&id=455e4150","dependencies":[{"path":"/Users/muhammad/Ayaz/express-vue3-tailwind-map/client/node_modules/vue-mapbox/src/components/map/GlMap.vue","mtime":1673189481016},{"path":"/Users/muhammad/Ayaz/express-vue3-tailwind-map/client/node_modules/babel-loader/lib/index.js","mtime":1673187839464},{"path":"/Users/muhammad/Ayaz/express-vue3-tailwind-map/client/node_modules/vue-loader/dist/templateLoader.js","mtime":1673187839921},{"path":"/Users/muhammad/Ayaz/express-vue3-tailwind-map/client/node_modules/cache-loader/dist/cjs.js","mtime":1673187838794},{"path":"/Users/muhammad/Ayaz/express-vue3-tailwind-map/client/node_modules/vue-loader/dist/index.js","mtime":1673187839436}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CiAgPGRpdiBjbGFzcz0ibWdsLW1hcC13cmFwcGVyIj4KICAgIDxkaXYgdi1vbmNlIDppZD0iY29udGFpbmVyIiByZWY9ImNvbnRhaW5lciIgLz4KICAgIDxzbG90IHYtaWY9ImluaXRpYWxpemVkIiAvPgogIDwvZGl2Pgo="},{"version":3,"sources":["/Users/muhammad/Ayaz/express-vue3-tailwind-map/client/node_modules/vue-mapbox/src/components/map/GlMap.vue"],"names":[],"mappings":";EACE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC1B,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;IAC7C,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;EAC5B,CAAC,CAAC,CAAC,CAAC,CAAC","file":"/Users/muhammad/Ayaz/express-vue3-tailwind-map/client/node_modules/vue-mapbox/src/components/map/GlMap.vue","sourceRoot":"","sourcesContent":["<template>\n  <div class=\"mgl-map-wrapper\">\n    <div v-once :id=\"container\" ref=\"container\" />\n    <slot v-if=\"initialized\" />\n  </div>\n</template>\n\n<script>\nimport withEvents from \"../../lib/withEvents\";\nimport mapEvents from \"./events\";\nimport options from \"./options\";\nimport withWatchers from \"./mixins/withWatchers\";\nimport withPrivateMethods from \"./mixins/withPrivateMethods\";\nimport withAsyncActions from \"./mixins/withAsyncActions\";\n\nexport default {\n  name: \"GlMap\",\n\n  mixins: [withWatchers, withAsyncActions, withPrivateMethods, withEvents],\n\n  props: {\n    mapboxGl: {\n      type: Object,\n      default: null\n    },\n    ...options\n  },\n\n  provide() {\n    const self = this;\n    return {\n      get mapbox() {\n        return self.mapbox;\n      },\n      get map() {\n        return self.map;\n      },\n      get actions() {\n        return self.actions;\n      }\n    };\n  },\n\n  data() {\n    return {\n      initial: true,\n      initialized: false\n    };\n  },\n\n  computed: {\n    loaded() {\n      return this.map ? this.map.loaded() : false;\n    },\n    version() {\n      return this.map ? this.map.version : null;\n    },\n    // TODO: make 'bounds' synced prop\n    bounds() {\n      return this.map ? this.map.getBounds() : null;\n    },\n    isStyleLoaded() {\n      return this.map ? this.map.isStyleLoaded() : false;\n    },\n    areTilesLoaded() {\n      return this.map ? this.map.areTilesLoaded() : false;\n    },\n    isMoving() {\n      return this.map ? this.map.isMoving() : false;\n    },\n    canvas() {\n      return this.map ? this.map.getCanvas() : null;\n    },\n    canvasContainer() {\n      return this.map ? this.map.getCanvasContainer() : null;\n    },\n    images() {\n      return this.map ? this.map.listImages() : null;\n    }\n  },\n\n  created() {\n    this.map = null;\n    this.propsIsUpdating = {};\n    this.mapboxPromise = this.mapboxGl\n      ? Promise.resolve(this.mapboxGl)\n      : import(\"mapbox-gl\");\n  },\n\n  mounted() {\n    this.$_loadMap().then(map => {\n      this.map = map;\n      if (this.RTLTextPluginUrl !== undefined) {\n        this.mapbox.setRTLTextPlugin(\n          this.RTLTextPluginUrl,\n          this.$_RTLTextPluginError\n        );\n      }\n      const eventNames = Object.keys(mapEvents);\n      this.$_bindMapEvents(eventNames);\n      this.$_registerAsyncActions(map);\n      this.$_bindPropsUpdateEvents();\n      this.initial = false;\n      this.initialized = true;\n      this.$emit(\"load\", { map, component: this });\n    });\n  },\n\n  beforeDestroy() {\n    this.$nextTick(() => {\n      if (this.map) this.map.remove();\n    });\n  }\n};\n</script>\n\n<style>\n.mgl-map-wrapper {\n  height: 100%;\n  position: relative;\n  width: 100%;\n}\n\n.mgl-map-wrapper .mapboxgl-map {\n  height: 100%;\n  left: 0;\n  position: absolute;\n  top: 0;\n  width: 100%;\n}\n</style>\n"]}]}